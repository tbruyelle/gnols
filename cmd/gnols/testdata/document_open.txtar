# Init phase
lsp initialize
lsp initialized
lsp didChangeConfiguration

# open document w/o errors
lsp textDocument-didOpen x.gno
cmpenv notify1.json notify1.json.golden

# open document with errors
lsp textDocument-didOpen y.gno
cmpenv notify2.json notify2.json.golden

# gno transpile should have created a *.gno.gen.go files
cmp x.gno.gen.go x.gno.gen.go.golden
cmp y.gno.gen.go y.gno.gen.go.golden

-- x.gno --
package foo

func Hello() string {
	return "hello world"
}
-- y.gno --
package foo

var x X
-- notify1.json.golden --
{
  "jsonrpc": "2.0",
  "method": "textDocument/publishDiagnostics",
  "params": {
    "uri": "file://$WORK/x.gno",
    "diagnostics": []
  }
}
-- notify2.json.golden --
{
  "jsonrpc": "2.0",
  "method": "textDocument/publishDiagnostics",
  "params": {
    "uri": "file://$WORK/y.gno",
    "diagnostics": [
      {
        "range": {
          "start": {
            "line": 2,
            "character": 6
          },
          "end": {
            "line": 2,
            "character": 6
          }
        },
        "severity": 1,
        "code": "transpile",
        "source": "gnols",
        "message": " undefined: X"
      }
    ]
  }
}
-- x.gno.gen.go.golden --
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//go:build gno

//line x.gno:1:1
package foo

func Hello() string {
	return "hello world"
}
-- y.gno.gen.go.golden --
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//go:build gno

//line y.gno:1:1
package foo

var x X
