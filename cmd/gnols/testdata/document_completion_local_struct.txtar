# Init phase
lsp initialize input/initialize.json
lsp initialized input/initialized.json
lsp workspace/didChangeConfiguration input/didChangeConfiguration.json
lsp textDocument/didOpen input/didOpen_x.json
lsp textDocument/didOpen input/didOpen_y.json
lsp textDocument/didOpen input/didOpen_z.json

lsp textDocument/completion input/completion_x.json
cmpenv output/completion_x.json expected/completion_x.json

lsp textDocument/completion input/completion_y.json
cmpenv output/completion_y.json expected/completion_y.json

lsp textDocument/completion input/completion_z.json
cmpenv output/completion_z.json expected/completion_z.json
-- x.gno --
package foo

// MyType is my type
type MyType struct {
	// Foo is foo
	Foo int
	// Bar is bar
	Bar string
	// Baz is baz
	Baz Other
}

type Other struct {
	X uint64
}

func Hello() {
	x := MyType{}
	x. // completion here, should return all fields of MyType
}
-- y.gno --
package foo

func init() {
	x := MyType{}
	x.Ba // completion here, should return only fields of MyType that match 'Ba'
}
-- z.gno --
package foo

func init() {
	x := MyType{}
	x.Other. // completion here, should return only fields of Other
}
-- input/initialize.json --
{
	"rootUri": "file://$WORK"
}
-- input/initialized.json --
{}
-- input/didChangeConfiguration.json --
{
	"settings": {
		"gno":              "$GOBIN/gno",
		"gopls":            "$GOBIN/gopls",
		"root":             "$GNOPATH",
		"precompileOnSave": true,
		"buildOnSave":      true
	}
}
-- input/didOpen_x.json --
{
	"textDocument": {
		"uri":"file://$WORK/x.gno",
		"text":"${FILE_x.gno}"
	}
}
-- input/didOpen_y.json --
{
	"textDocument": {
		"uri":"file://$WORK/y.gno",
		"text":"${FILE_y.gno}"
	}
}
-- input/didOpen_z.json --
{
	"textDocument": {
		"uri":"file://$WORK/z.gno",
		"text":"${FILE_z.gno}"
	}
}
-- input/completion_x.json --
{
	"textDocument": {
		"uri":"file://$WORK/x.gno"
	},
	"position": {
		"character": 3,
		"line": 18
	}
}
-- expected/completion_x.json --
[
  {
    "detail": "Foo int",
    "documentation": "Foo is foo",
    "insertText": "Foo",
    "kind": 5,
    "label": "Foo"
  },
  {
    "detail": "Bar string",
    "documentation": "Bar is bar",
    "insertText": "Bar",
    "kind": 5,
    "label": "Bar"
  },
  {
    "detail": "Baz Other",
    "documentation": "Baz is baz",
    "insertText": "Baz",
    "kind": 5,
    "label": "Baz"
  }
]
-- input/completion_y.json --
{
	"textDocument": {
		"uri":"file://$WORK/y.gno"
	},
	"position": {
		"character": 4,
		"line": 4 
	}
}
-- expected/completion_y.json --
[
  {
    "detail": "Bar string",
    "documentation": "Bar is bar",
    "insertText": "Bar",
    "kind": 5,
    "label": "Bar"
  },
  {
    "detail": "Baz Other",
    "documentation": "Baz is baz",
    "insertText": "Baz",
    "kind": 5,
    "label": "Baz"
  }
]
-- input/completion_z.json --
{
	"textDocument": {
		"uri":"file://$WORK/z.gno"
	},
	"position": {
		"character": 9,
		"line": 4 
	}
}
-- expected/completion_z.json --
[
  {
    "detail": "X string",
    "insertText": "X",
    "kind": 5,
    "label": "X"
  }
]
